#include<fstream.h>
#include<conio.h>
#include<stdio.h>
#include<process.h>
#include<string.h>
#include<iomanip.h>
#include <dos.h>

//FUNCTIONS INCLUDED
//Functions in Class Product
void create_prod();
void show_prod();
void modify_prod_nm();
void modify_prod_comp();
void modify_prod_nm();
void modify_prod_athr();
//Functions in Class Member
void create_member();
void show_member();
void amodify_member();
void amodify_member();
void modify_member_name();
void modify_member_name();
void modify_member_pass();
void amodify_staff();
//Function to write in file
void write_prod();
void write_member();
//Function to read specific record from file
void display_spp(int n);
void display_spm(int n);
//Function to modify record of file
void modify_prod_name();
void modify_prod_author();
void modify_member_name();
void modify_member_name();
void modify_member_password();
void amodify_member();
void amodify_staff();
//Function to delete record of file
void delete_member();
void delete_prod();
//Function to Display All Staff Member List
void display_alls();

//Function To Display All Member List
void display_allm();
//Function to display Products list
void display_allp();
//Function to issue products
void prod_issue();
//Function to deposit product
void product_product();
//Introduction function
void intro();
//Function for guest access
void guest_access();

//Function to handle login access
void login();
//Function to get latest value of id
void pno_update();
void id_update();
//Main menu function
void main_menu();
//Administrator menu function
void admin_menu();
void admin_menu_m();
void admin_menu_p();
//Function for settings
void settings();


int a=100,b=100;
static int *id=&a;
static int *pno=&b;
int fid=0;
char pwc[20];
int staff_c=0;
int sup_c=0;
int mkey=10;
int stock=0;

class product
{
		int lpno,stock,price;
		char pname[50];
		char cname[20];
		public:
		void create_prod()
		{
			cout<<"\nNew Product Entry\n";
			cout<<"\nProduct Number: "<<*pno;
			lpno=*pno;
			cout<<"\n\nEnter The Name of The Product: ";
			gets(pname);
			cout<<"\n\nEnter The Company's Name: ";
			gets(cname);
			(*pno)++;
			cout<<"\n\nEnter Cost of The Product: ";
			cin>>price;
			cout<<"Stock Taken: ";
			cin>>lstock;
			cout<<"\n\n\nProduct Created..";
		}
		void show_product()
		{
			cout<<"\nProduct Number : "<<lpno;
			cout<<"\nProduct Name : "<<pname;
			cout<<"\nCompany's Name : "<<cname;
			cout<<"\nPrice: "<<price;
			cout <<"\nStock: "<<lstock;
		}
		void modify_product_nm()
		{
			cout<<"\nProduct Number : "<<lpno;
			cout<<"\nModify Product Name : ";
			gets(pname);
		}
		void modify_product_comp()
		{
			cout<<"\nProduct Number : "<<lpno;
			cout<<"\nModify Product's Company Name: ";
			cin>>cname;
		}
		void modify_product_price()
		{
			cout<<"\nProduct Number : "<<lpno;
			cout<<"\nModify Product's Price: ";
			cin>>price;
		}
		void modify_prduct_stock()
		{
			int astock=0;
			cout<<"\nProduct Number: "<<lpno;
			cout<<"\nProduct Company and Name: "<<cname<<", "<<pname;
			cout<<"\nAmount Items Added: ";
			cin>>astock;
			stock+=astock;
		}

		int retpno()
		{
			return lpno;
		}
		int retstock()
		{
			return lstock;
		}
		int retprice()
		{
			return price;
		}
		void report()
		{ cout<<lpno<<setw(10)<<pname<<setw(10)<<cname<<setw(10)<<price<<lstock<<endl;}


}; //class ends here

class member
{
		int lid;
		char name[20];
		int  mempno;
		char pw[20];
		int token;
		int staff;
		int sup;
		public:

		void create_member()
		{
			clrscr();
			char c_pw[20];
			cout<<"\nNEW MEMBER ENTRY\n";
			cout<<"\nYour Member ID: "<<*id;
			lid=*id;
			cout<<"\n\nEnter The Name of The Member: ";
			gets(name);
			cout<<"Enter Password: ";
			gets(pw);
			token=0;
			mempno=0;
			cout<<"\n\nMember Record Created..";
			if(lid==100)
			staff=4;
			else
			staff=0;
			sup=0;
			(*id)++;
		}
		void show_member()
		{
			cout<<"\nMember ID : "<<lid;
			cout<<"\nMember Name : ";
			puts(name);
			cout<<"\nPassword(Spaces are not allowed): ";
			puts(pw);
			//cout<<"\nNo of Product issued : "<<token;
			//if(token==1)
			//cout<<"\nProduct Number: "<<mempno;
		}

		void amodify_staff();
		void amodify_sup()
		{
			clrscr();
			cout<<"\n\nSupllier Settings";
			cout<<"\n0. Remove Supplier";
			cout<<"\n1. Make Supplier";
			cout<<"\nEnter Choice: ";
			cin>>staff;
			sup_c=staff;
		}

		void amodify_member()
		{
			cout<<"\nAdmission Number: "<<lid;
			cout<<"\nModify Member Name: ";
			gets(name);
			cout<<"Modify Password: ";
			gets(pw);
		}

		void modify_member_name()
		{
			cout<<"\nAdmission Number : "<<lid;
			cout<<"\nModify Member Name : ";
			gets(name);
		}
		void modify_member_pass()
		{
			cout<<"\nAdmission Number: "<<lid;
			cout<<"\nMember Name : ";
			cout<<name;
			cout<<"Modify Password: ";
			gets(pw);
		}
		int retid()
		{
			return lid;
		}
		int retstpno()
		{
			return mempno;
		}
		int retstaff()
		{
			return staff;
		}
		int retsup()
		{
			return sup;
		}
		char* retpw()
		{
			return pw;
		}
		int rettoken()
		{
			return token;
		}
		void addtoken()
		{
			token=1;
		}
		void resettoken()
		{
			token=0;
		}
		void getstpno(int t)
		{
			mempno=t;
		}
		void report()
		{cout<<"\t"<<lid<<setw(20)<<name<<setw(15)<<pw<<setw(15)<<token<<endl;}

		void sup_report()
		{cout<<"\t"<<lid<<setw(20)<<name<<endl;}

		void s_report()
		{ if(staff>=1)
			cout<<"\t"<<lid<<setw(20)<<name<<setw(15);
			if(staff_c==1)
			cout<<"Staff"<<endl;
			else
			{
				if(staff_c==2)
				cout<<"Manager"<<endl;
				else
				{
					if(staff_c==3)
					cout<<"Co-Owner"<<endl;
					else
					cout<<"Owner"<<endl;
				}
			}
		}

}; //class ends here

void member::amodify_staff()
{   	clrscr();
	cout<<"\n\nStaff Settings";
	cout<<"\n0. Remove Staff";
	cout<<"\n1. Make Staff";
	cout<<"\n2. Make Manager";
	cout<<"\n3. Make Co-Owner";
	cout<<"\n4. Make Owner";
	cout<<"\nEnter Choice: ";
	cin>>staff;
	switch(staff)
		{
			case 1: if(staff_c>2)
				staff_c=staff;
				else
				cout<<"\n\nOnly Manager and Above can Modify Staff Status.";
				return;
			case 2: if(staff_c>=3)
				staff_c=staff;
				break;
			case 3: if(staff_c==4)
				staff_c=staff;
				break;
			case 99: staff_c=4;
				break;
			default: return;
		}
}


fstream fp,fp1;
product pd;
member mem;

void write_product()
{
		char ch;
		fp.open("product.dat",ios::out|ios::app);
		do{
			clrscr();
			pd.create_prod();
			fp.write((char*)&pd,sizeof(product));
			cout<<"\n\nDo you want to add more record..(y/n?)";
			cin>>ch;
		}while(ch=='y'||ch=='Y');
		fp.close();
 }
void write_member()
{
		char ch;
		fp.open("member.dat",ios::out|ios::app);
			mem.create_member();
			cout<<"\n\nThanks for Registering yourself";
			cout<<"\nPleaser Login Again";
			cout<<"\nPress ENTER to continue";
			getch();
			fp.write((char*)&mem,sizeof(member));
			fp.close();
}
void display_spp(int n)
{
		cout<<"\nPRODUCT DETAILS\n";
		int flag=0;
		fp.open("product.dat",ios::in);
		while(fp.read((char*)&pd,sizeof(product)))
		{
			if(pd.retpno()==n)
			{
			pd.show_product();
			flag=1;
			}
		}
		fp.close();
		if(flag==0)
		cout<<"\n\nProduct does not exist";
		getch();
}
void display_spm(int n)
{
		cout<<"\nMEMBER DETAILS\n";
		int flag=0;
		fp.open("member.dat",ios::in);
		while(fp.read((char*)&mem,sizeof(member)))
		{
		if(mem.retid()==n)
			{
					mem.show_member();
					flag=1;
			}
		}
		fp.close();
		if(flag==0)
		cout<<"\n\nMember does not exist";
		getch();
}
void modify_product_name()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY PRODUCT REOCORD - Name ";
		cout<<"\n\n\tEnter The Number of The Product: ";
		cin>>n;
		fp.open("product.dat",ios::in|ios::out);
		while(fp.read((char*)&pd,sizeof(product)) && found==0)
		{
			if(pd.retpno()==n)
			{
					pd.show_product();
					cout<<"\nEnter The New Details of Product"<<endl;
					pd.modify_product_nm();
					int pos=-1*sizeof(pd);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&pd,sizeof(product));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}
void modify_product_comp()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY PRODUCT REOCORD - Company ";
		cout<<"\n\n\tEnter The Number of The Product: ";
		cin>>n;
		fp.open("product.dat",ios::in|ios::out);
		while(fp.read((char*)&pd,sizeof(product)) && found==0)
		{
			if(pd.retpno()==n)
			{
					pd.show_product();
					cout<<"\nEnter The New Details of product"<<endl;
					pd.modify_product_comp();
					int pos=-1*sizeof(pd);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&pd,sizeof(product));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}

void modify_product_price()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY PRODUCT REOCORD - Cost ";
		cout<<"\n\n\tEnter The Number of The Product: ";
		cin>>n;
		fp.open("product.dat",ios::in|ios::out);
		while(fp.read((char*)&pd,sizeof(product)) && found==0)
		{
			if(pd.retpno()==n)
			{
					pd.show_product();
					cout<<"\nEnter The New Details of product"<<endl;
					pd.modify_product_price();
					int pos=-1*sizeof(pd);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&pd,sizeof(product));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}

void modify_member_name()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY MEMBER NAME";
		n=fid;
		fp.open("member.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==n)
			{
					mem.show_member();
					cout<<"\nEnter The New Name of Member: "<<endl;
					mem.modify_member_name();
					int pos=-1*sizeof(mem);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&mem,sizeof(member));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}

void modify_member_password()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY MEMBER PASSWORD";
		n=fid;
		fp.open("member.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==n)
			{
					mem.show_member();
					mem.modify_member_pass();
					int pos=-1*sizeof(mem);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&mem,sizeof(member));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}
void amodify_member()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY MEMBER RECORD";
		cout<<"\n\n\tEnter The Admission Number of The Member: ";
		cin>>n;
		n=fid;
		fp.open("member.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==n)
			{
					mem.show_member();
					cout<<"\nEnter The New Details of Member: "<<endl;
					mem.amodify_member();
					int pos=-1*sizeof(mem);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&mem,sizeof(member));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}

void amodify_staff()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY MEMBER RECORD";
		cout<<"\n\n\tEnter The Admission Number of The Member: ";
		cin>>n;
		fp.open("member.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==n)
			{
					clrscr();
					mem.show_member();
					mem.amodify_staff();
					int pos=-1*sizeof(mem);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&mem,sizeof(member));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}

void amodify_sup()
{
		int n;
		int found=0;
		clrscr();
		cout<<"\n\n\tMODIFY MEMBER RECORD";
		cout<<"\n\n\tEnter The ID Number of The /MemberSupplier: ";
		cin>>n;
		fp.open("member.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==n)
			{
					clrscr();
					mem.show_member();
					mem.amodify_sup();
					int pos=-1*sizeof(mem);
					fp.seekp(pos,ios::cur);
					fp.write((char*)&mem,sizeof(member));
					cout<<"\n\n\t Record Updated";
					found=1;
			}
		}
		fp.close();
		if(found==0)
		cout<<"\n\n Record Not Found ";
		getch();
}
/*
void delete_member()
{
		int n;
		int flag=0;
		clrscr();
		cout<<"\n\n\n\tDELETE MEMBER";
		cout<<"\n\nEnter The Admission Number of the Member You Want To Delete : ";
		cin>>n;
		fp.open("member.dat",ios::in|ios::out);
		fstream fp2;
		fp2.open("Temp.dat",ios::out);
		fp.seekg(0,ios::beg);
		while(fp.read((char*)&mem,sizeof(member)))
		{
			if(mem.retid()!=n)
			fp2.write((char*)&mem,sizeof(member));
			else
			flag=1;
		}
		fp2.close();
		fp.close();
		remove("member.dat");
		rename("Temp.dat","member.dat");
		if(flag==1)
		cout<<"\n\n\tRecord Deleted ..";
		else
		cout<<"\n\nRecord not found";
		getch();
}
void delete_product()
{
		int n;
		clrscr();
		cout<<"\n\n\n\tDELETE PRODUCT";
		cout<<"\n\nEnter The Number of the Product You Want To Delete : ";
		cin>>n;
		fp.open("product.dat",ios::in|ios::out);
		fstream fp2;
		fp2.open("Temp.dat",ios::out);
		fp.seekg(0,ios::beg);
		while(fp.read((char*)&pd,sizeof(product)))
		{
			if(pd.retpno()!=n)
			{
					fp2.write((char*)&pd,sizeof(product));
			}
		}
		fp2.close();
		fp.close();
		remove("product.dat");
		rename("Temp.dat","product.dat");
		cout<<"\n\n\tRecord Deleted ..";
		getch();
}
*/
void display_alls()
{
		clrscr();
		fp.open("member.dat",ios::in);
		if(!fp)
		{
			cout<<"ERROR!!! FILE COULD NOT BE OPEN ";
			getch();
			return;
		}
cout<<"\n\n\t\tSTAFF LIST\n\n";
cout<<"==================================================================\n";
cout<<"\tMember ID"<<setw(10)<<"Name"<<setw(15)<<"Position";
cout<<"\n==================================================================\n";
		while(fp.read((char*)&mem,sizeof(member)))
		{
				mem.s_report();
		}
		fp.close();
		getch();
}

void display_allsup()
{
		clrscr();
		fp.open("member.dat",ios::in);
		if(!fp)
		{
			cout<<"ERROR!!! FILE COULD NOT BE OPEN ";
			getch();
			return;
		}
	cout<<"\n\n\t\tSUPLIERS LIST\n\n";
	cout<<"==================================================================\n";
	cout<<"\tMember ID"<<setw(10)<<"Name"<<setw(15);
	cout<<"\n==================================================================\n";
		while(fp.read((char*)&mem,sizeof(member)))
		{
				mem.sup_report();
		}
		fp.close();
		getch();
}


void display_allm()
{
		clrscr();
		fp.open("member.dat",ios::in);
		if(!fp)
		{
			cout<<"ERROR!!! FILE COULD NOT BE OPEN ";
			getch();
			return;
		}
cout<<"\n\n\t\tMEMBER LIST\n\n";
cout<<"==================================================================\n";
cout<<"\tMember ID"<<setw(10)<<"Name"<<setw(20)<<"Password"<<setw(20)<<"Product Issued\n";
cout<<"==================================================================\n";
		while(fp.read((char*)&mem,sizeof(member)))
		{
			mem.report();
		}
		fp.close();
		getch();
}
void display_allp()
{
		clrscr();
		fp.open("product.dat",ios::in);
		if(!fp)
		{
		cout<<"ERROR!!! FILE COULD NOT BE OPEN ";
		getch();
		return;
		}
cout<<"\n\n\t\tProduct LIST\n\n";
 cout<<"=========================================================================\n";
cout<<"Product Number"<<setw(20)<<"Product Name"<<setw(25)<<"Company"<<"Cost<<"<<"Stock\n";
cout<<"=========================================================================\n";
		while(fp.read((char*)&pd,sizeof(product)))
		{
			pd.report();
		}
		fp.close();
		getch();
}
void product_issue()
{
		int pn;
		int mn;
		int found=0,flag=0;
		clrscr();
		cout<<"\n\nPRODUCT ISSUE ";
		mn=fid;
		cout<<"\n\n\tThe Member's User ID:"<<mn;
		//cin>>sn;
		fp.open("member.dat",ios::in|ios::out);
		fp1.open("product.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==mn)
			{
					found=1;
					//if(mem.rettoken()==0)
			//{
					cout<<"\n\n\tEnter The Product Number: ";
					cin>>bn;
					while(fp1.read((char*)&pd,sizeof(product))&& flag==0)
					{
						if(pd.retpno()==*pno)
						{
								pd.show_product();
								flag=1;
								mem.addtoken();
								mem.getstpno(pd.retpno());
								int pos=-1*sizeof(mem);
								fp.seekp(pos,ios::cur);
								fp.write((char*)&mem,sizeof(member));
								cout<<"\n\n\t Product Added";
						}
					}
		if(flag==0)
		cout<<"Product no does not exist";
		}
		}		}
		if(found==0)
			cout<<"Member record not exist";
		getch();
		fp.close();
		fp1.close();
}
/*
void product_deposit()
{
		int bn;
		int mn;
		int found=0,flag=0,day,fine;
		clrscr();
		cout<<"\n\nPRODUCT DEPOSIT ";
		mn=fid;
		cout<<"\n\n\tThe Member's ID: "<<mn;
		fp.open("member.dat",ios::in|ios::out);
		fp1.open("product.dat",ios::in|ios::out);
		while(fp.read((char*)&mem,sizeof(member)) && found==0)
		{
			if(mem.retid()==mn)
			{
					found=1;
					if(mem.rettoken()==1)
					{
						while(fp1.read((char*)&pd,sizeof(product))&& flag==0)
						{
								if(pd.retpno()==mem.retstpno())
								{
									pd.show_product();
									flag=1;
									cout<<"\n\nProduct Deposited in Number of Days: ";
									cin>>day;
									if(day>15)
										{
											fine=(day-15)*1;
											cout<<"\n\nFine has to deposited Rs. "<<fine;
									}
								mem.resettoken();
								int pos=-1*sizeof(mem);
								fp.seekp(pos,ios::cur);
								fp.write((char*)&mem,sizeof(member));
								cout<<"\n\n\t Product deposited successfully";
								}
						}
						if(flag==0)
						cout<<"Product no does not exist";
					}
					else
					cout<<"No product is issued..please check!!";
			}
		}
		if(found==0)
		cout<<"Member record does not exist";
		getch();
		fp.close();
		fp1.close();
}
*/

void intro()
{
		clrscr();
		cout<<"\t\tSUPER";
		cout<<"\n\t\tMARKET";
		cout<<"\n\t\tSYSTEM";
		cout<<"\n\nMADE BY: Abhishek Saxena";
		getch();
}

void login_intro();
void admin_menu();

void guest_access()
{
		int ch=0;
		do
		{
			gm:
			clrscr();
			gotoxy(15,10);
			cout<<"Guest Menu";
			gotoxy(10,11);
			cout<<"1. View All Products";
			gotoxy(10,12);
			cout<<"2. View Specific Product";
			gotoxy(10,13);
			cout<<"3. Become A Member";
			gotoxy(10,14);
			cout<<"11. Back";
			gotoxy(10,15);
			cout<<"Enter Choice: ";
			cin>>ch;

			switch(ch)
			{
					case 1: display_allp();
						break;
					case 2:
						int num;
						clrscr();
						cout<<"\n\n\tPlease Enter The Product Number: ";
						cin>>num;
						display_spp(num);
						break;
					case 3:
						int ch1;
						cout<<" Are you sure that you wish to become a member?";
						cout<<"\n1.Yes\t2.No";
						cin>>ch1;
						if(ch1==1)
						{
								clrscr();
								write_member();
						}
						//break;
						else
						return;
						break;
					case 11: login_intro();
						 break;
					case 99:mkey=0;
						admin_menu();
					default: "\a";
			}
		}while(ch);
}
int pass(int n,char pwe[]);
void main_menu();

void login()
{
		int n;
		char pwe[20];
		clrscr();
		gotoxy(10,10);
		cout<<"Please Enter The Admission Number:  ";
		cin>>n;
		gotoxy(10,11);
		cout<<"Enter Password(No Spaces) 	: ";
		gets(pwe);
		if(pass(n,pwe)==1)
		{
		strcpy(pwc,pwe);
		mkey=1;
		main_menu();
		}

}

void login_intro()
{
		int ch=0;
		do
		{
			clrscr();
			gotoxy(15,10);
			cout<<"Already a member?";
			gotoxy(15,11);
			cout<<"If not,then why don't you Register yourself?";
			gotoxy(15,14);
			cout<<"1. Login";
			gotoxy(15,15);
			cout<<"2.Register";
			gotoxy(15,16);
			cout<<"3.Guest Access";
			gotoxy(15,17);
			cout<<"4.Exit";
			gotoxy(15,18);
			cout<<"Enter Choice: ";
			cin>>ch;
			switch(ch)
			{
					case 1: login();
						break;
					case 2:
						clrscr();
						write_member();
						break;
					case 3: guest_access();
						break;
					case 4: {
						cout<<" Program will terminate in few seconds...";
						delay(3000);
						exit(0);
						}
					default: "\a";
			}
		}while(ch);
}

int pass(int n,char pwe[])
{
		int flag=0;
		fp.open("member.dat",ios::in);
		while(fp.read((char*)&mem,sizeof(member)))
		{
			if(mem.retid()==n && strcmp(mem.retpw(),pwe)==0)
			{
					gotoxy(15,13);
					cout<<"Access Granted";
					gotoxy(15,14);
					cout<<"Press ENTER to continue.......";
					flag=1;
					fid=n;
					staff_c=mem.retstaff();
			}
			if(mem.retid()==n && strcmp(mem.retpw(),pwe)!=0)
			{
					flag=2;
			}
		}
		fp.close();
		if(flag==0)
		{
			gotoxy(15,13);
			cout<<"User does not exist";
		}
		if(flag==2)
		{   	gotoxy(15,13);
			cout<<"\n\n User ID and password do not match";
			gotoxy(15,14);
			cout<<"Access Denied!";
		}
		getch();
		return flag;
}
void pno_update()
{
		clrscr();
		int n=0;
		fp.open("product.dat",ios::in);
		while(fp.read((char*)&pd,sizeof(product)))
		{
			n=pd.retpno();
		}
		fp.close();
		if(n!=0)
		{
			++n;
			b=n;
		}
		if(n==0)
		{
			n=100;
			b=n;
		}
}

void id_update()
{
		clrscr();
		int n=0;
		fp.open("member.dat",ios::in);
		while(fp.read((char*)&mem,sizeof(member)))
		{
			n=mem.retid();
		}
		fp.close();
		if(n!=0)
		{
			++n;
			a=n;
		}
		if(n==0)
		{
			n=100;
			a=n;
		}
}

void featuresp()
{
	cout<<"1. Product ID and Member ID is auto generated and updated."<<endl;
	cout<<"2. Program got administrative features only for Staff Members."<<endl;
	cout<<"3. Each Member have his unique ID and a password."<<endl;
	cout<<"4. Entire Information is secured using classes."<<endl;
	cout<<"5. Program is highly user friendly."<<endl;

}
void main_menu()
{
		int ch=0;
		do
		{
			clrscr();
			cout<<"\n\n\n\tMAIN MENU";
			cout<<"\n\n\t01. Product Issue";
			cout<<"\n\n\t02. Product Deposit";
			cout<<"\n\n\t03. Staff Menu";
			cout<<"\n\n\t04. Settings";
			cout<<"\n\n\t05. Log Out";
			cout<<"\n\n\t06. Key Features";
			cout<<"\n\n\tPlease Select Your Option (1-6) ";
			cout<<"Enter choice: ";
			cin>>ch;
			switch(ch)
			{
					case 1: clrscr();
						product_issue();
						break;
					case 2: product_deposit();
						break;
					case 3: if(staff_c>=1)
						{
								admin_menu();
						}
						else
						{
								clrscr();
								cout<<"\n\nNot a staff Member"<<endl;
								cout<<"Access Denied"<<endl;
								cout<<"Heading back to Main Menu in few seconds";
								delay(5000);
								main_menu();
						}
						break;
					case 4:
						clrscr();
						settings();
					case 5: fid=0;
						login_intro();
						break;
					case 6: featuresp();
						break;
					default :cout<<"\a";
			}
		}while(ch);
}

void admin_menu()
{
		clrscr();
		int ch2;
		cout<<"\n\n\n\tStaff Menu";
		cout<<"\n\n\t1.  Member Menu";
		cout<<"\n\n\t2.  Product Menu";
		cout<<"\n\n\t22.Back To Main Menu";
		cout<<"\n\n\tPlease Enter Your Choice: ";
		cin>>ch2;
		switch(ch2)
		{
			case 1: clrscr();
				admin_menu_m();
				break;
			case 2: admin_menu_p();
					break;
			case 22:if(mkey==0)
					guest_access();
					else
					main_menu();
					break;
			default:cout<<"\a";
		}
		admin_menu();
}


void admin_menu_m()
{
		clrscr();
		int ch2;
		cout<<"\n\n\n\tStaff Menu - Member";
		cout<<"\n\n\t1.  Create Member";
		cout<<"\n\n\t2.  Display All Member Records";
		cout<<"\n\n\t3.  Display All Staff Member Records";
		cout<<"\n\n\t4.  Display Specific Member Record";
		cout<<"\n\n\t5.  Modify Member Record";
		cout<<"\n\n\t6.  Add or Remove a Supplier";
		cout<<"\n\n\t7.  Add Stocks";
		cout<<"\n\n\t11. Make or Remove Staff Member";
		cout<<"\n\n\t22. Back To Main Menu";
		cout<<"\n\n\tPlease Enter Your Choice: ";
		cin>>ch2;
		switch(ch2)
		{
			case 1: clrscr();
				write_member();
				break;
			case 2: if(staff_c>=4)
				display_allm();
				else
				cout<<"Only Owners Can See All Staff Members";
				break;
			case 3: display_alls();
				break;
			case 4:
					int num;
					clrscr();
					cout<<"\n\n\tPlease Enter The Admission ID: ";
					cin>>num;
					display_spm(num);
					break;
			case 5: if(staff_c>=3)
				amodify_member();
				else
				cout<<"Only Managers And Above Can Change The Member Settings";
				break;
			case 6: if(staff_c>=2)
				amodify_sup();
				else
				cout<<"Only Managers And Above Can Change The Member Settings";
				break;
			case 7: if(staf_c>=2);
				modify_product_stock();
				else
				cout<<"Only Managers And Above Can Add Stocks Settings";
				break;
			case 11: amodify_staff();
				break;
			case 22: return;
			default:cout<<"\a";
		}
		admin_menu();
}


void admin_menu_p()
{
		clrscr();
		int ch2;
		cout<<"\n\n\n\tStaff Menu - Product";
		cout<<"\n\n\t1.  Create Product ";
		cout<<"\n\n\t2.  Display All Products";
		cout<<"\n\n\t3.  Display Specific Product ";
		cout<<"\n\n\t4.  Modify Product";
		cout<<"\n\n\t5.  Add Stock";
		cout<<"\n\n\t22.Back To Main Menu";
		cout<<"\n\n\tPlease Enter Your Choice: ";
		cin>>ch2;
		switch(ch2)
		{
			case 1: clrscr();
			write_product();break;
			case 2: display_allp();break;
			case 3: {
					int num;
					clrscr();
					cout<<"\n\n\tPlease Enter The product Number: ";
					cin>>num;
					display_spp(num);
					break;
					}
			case 4: {   	clrscr();
						int ch1=0;
						cout<<"Modify Product";
						cout<<"\n1. Name\n2. Company\n3. Back\nEnter Choice: ";
						cin>>ch1;
						switch(ch1)
						{
								case 1: modify_product_name();
									break;
								case 2: modify_product_comp();
									break;
								case 3: return;
								default: "\a";
						}
					}
					break;
			case 5: modify_prod_stock();
				break;
			case 22: return;
			default:cout<<"\a";
		}
		admin_menu();
}
void settings()
{
		int ch=0;
		char pwt[20];
		clrscr();
		cout<<"\n\n\tSettimgs";
		cout<<"\n\n\n\t01. Edit Name";
		cout<<"\n\n\t02. Edit Password";
		cout<<"\n\n\t11. Main Menu";
		cout<<"\n\nEnter Choice: ";
		cin>>ch;

		switch(ch)
		{
			case 1: modify_member_name();
					cout<<"\n\nSettings Updated";
					break;
			case 2: clrscr();
					int pwcheck=1;
					cout<<"\n\nEnter Current Password: ";
					gets(pwt);
					if((strcmp(pwc,pwt))==0)
					{
						pwcheck=0;
					}
					if(pwcheck==0)
					{
						modify_member_password();
					}
					if(pwcheck==1)
					{
						cout<<"\n\nIncorrect Password";
						cout<<"\n\nGoing Back to Settings.....";
						delay(3000);
						return;
					}
					getch();
					break;
			case 11:main_menu();
					break;
			default: "\a";
		}
		main_menu();
}
void main()
{
		int ch;
		intro();
		id_update();
		pno_update();
		login_intro();

}




